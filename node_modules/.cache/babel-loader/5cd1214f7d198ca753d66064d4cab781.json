{"ast":null,"code":"var _jsxFileName = \"/Users/peytonrapo/Desktop/projects/PokemonWorld/src/Grid.tsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasReference = void 0;\n\n    this.redraw = () => {\n      if (this.canvasReference.current === null) {\n        throw new Error(\"Unable to access canvas.\");\n      }\n\n      const ctx = this.canvasReference.current.getContext('2d');\n\n      if (ctx === null) {\n        throw new Error(\"Unable to create canvas drawing context.\");\n      } // First, let's clear the existing drawing so we can start fresh:\n\n\n      ctx.clearRect(0, 0, this.props.width, this.props.height);\n    };\n\n    this.canvasReference = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    // Since we're saving the image in the state and re-using it any time we\n    // redraw the canvas, we only need to load it once, when our component first mounts.\n    this.redraw();\n  }\n\n  componentDidUpdate() {\n    this.redraw();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasReference,\n        width: this.props.width,\n        height: this.props.height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/Users/peytonrapo/Desktop/projects/PokemonWorld/src/Grid.tsx"],"names":["React","Component","Grid","constructor","props","canvasReference","redraw","current","Error","ctx","getContext","clearRect","width","height","createRef","componentDidMount","componentDidUpdate","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;AAOA,MAAMC,IAAN,SAAmBD,SAAnB,CAA4C;AAIxCE,EAAAA,WAAW,CAACC,KAAD,EAAmB;AAC1B,UAAMA,KAAN;AAD0B,SAF9BC,eAE8B;;AAAA,SAe9BC,MAf8B,GAerB,MAAM;AACX,UAAI,KAAKD,eAAL,CAAqBE,OAArB,KAAiC,IAArC,EAA2C;AACvC,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACH;;AACD,YAAMC,GAAG,GAAG,KAAKJ,eAAL,CAAqBE,OAArB,CAA6BG,UAA7B,CAAwC,IAAxC,CAAZ;;AACA,UAAID,GAAG,KAAK,IAAZ,EAAkB;AACd,cAAM,IAAID,KAAJ,CAAU,0CAAV,CAAN;AACH,OAPU,CASX;;;AACAC,MAAAA,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKP,KAAL,CAAWQ,KAA/B,EAAsC,KAAKR,KAAL,CAAWS,MAAjD;AAEH,KA3B6B;;AAE1B,SAAKR,eAAL,gBAAuBL,KAAK,CAACc,SAAN,EAAvB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACA;AACA,SAAKT,MAAL;AACH;;AAEDU,EAAAA,kBAAkB,GAAG;AACjB,SAAKV,MAAL;AACH;;AAkBDW,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA,6BACI;AAAQ,QAAA,GAAG,EAAE,KAAKZ,eAAlB;AAAmC,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWQ,KAArD;AAA4D,QAAA,MAAM,EAAE,KAAKR,KAAL,CAAWS;AAA/E;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAzCuC;;AA4C5C,eAAeX,IAAf","sourcesContent":["import React, {Component} from 'react';\n\ninterface GridProps {\n    width: number;   // width of the canvas on which to draw\n    height: number;  // height of the canvas on which to draw\n}\n\nclass Grid extends Component<GridProps, {}> {\n\n    canvasReference: React.RefObject<HTMLCanvasElement>\n\n    constructor(props: GridProps) {\n        super(props);\n        this.canvasReference = React.createRef();\n    }\n\n    componentDidMount() {\n        // Since we're saving the image in the state and re-using it any time we\n        // redraw the canvas, we only need to load it once, when our component first mounts.\n        this.redraw();\n    }\n\n    componentDidUpdate() {\n        this.redraw()\n    }\n\n    redraw = () => {\n        if (this.canvasReference.current === null) {\n            throw new Error(\"Unable to access canvas.\");\n        }\n        const ctx = this.canvasReference.current.getContext('2d');\n        if (ctx === null) {\n            throw new Error(\"Unable to create canvas drawing context.\");\n        }\n\n        // First, let's clear the existing drawing so we can start fresh:\n        ctx.clearRect(0, 0, this.props.width, this.props.height);\n\n    };\n\n\n\n    render() {\n        return (\n            <div id=\"grid\">\n                <canvas ref={this.canvasReference} width={this.props.width} height={this.props.height}/>\n            </div>\n        );\n    }\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}